
import PhotosUI
import SwiftUI

struct ImagePicker: UIViewControllerRepresentable {
    
    @Binding var image: UIImage?
    
    class Coordinator: NSObject, PHPickerViewControllerDelegate {
        var parent: ImagePicker
        
        init(parent: ImagePicker) {
            self.parent = parent
        }
        
        func picker(_ picker: PHPickerViewController, didFinishPicking results: [PHPickerResult]) {
            picker.dismiss(animated: true)
            
            guard let provider = results.first?.itemProvider else { return }
            
            if provider.canLoadObject(ofClass: UIImage.self) {
                provider.loadObject(ofClass: UIImage.self) {image, _ in
                    self.parent.image = image as? UIImage
                }
            }
            
            
        }
        
    }
    
    func makeUIViewController(context: Context) -> PHPickerViewController {
        var config = PHPickerConfiguration()
        config.filter = .images
        
        let picker = PHPickerViewController(configuration: config)
        picker.delegate = context.coordinator
        return picker
    }
    
    func updateUIViewController(_ uiViewController: PHPickerViewController, context: Context) {
        
    }
    
    func makeCoordinator() -> Coordinator {
        Coordinator(parent: self)
    }
    
}



----------------------------- calling class ------------------

import SwiftUI

struct ContentView: View {
    
    @State var image: Image?
    @State var includeImage: UIImage?
    @State var shouldImagePicker = false
    
    var body: some View {
       
        VStack {
            image?
                .resizable()
                .scaledToFit()
            
            Button("Select Image") {
                shouldImagePicker.toggle()
            }
        }
        .onChange(of: includeImage, perform: { value in
            loadImage()
        })
        .sheet(isPresented: $shouldImagePicker, content: {
            ImagePicker(image: $includeImage)
        })
    }
    
    func loadImage() {
        guard let img = includeImage else { return }
        image = Image(uiImage: img)
    }
    
}

#Preview {
    ContentView()
}
